
// This is an autogenerated file from Firebase Studio.
"use client";

import { Bar, BarChart, CartesianGrid, XAxis, YAxis, Tooltip as RechartsTooltip, Legend as RechartsLegend, ResponsiveContainer } from 'recharts';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { ChartContainer, ChartTooltipContent, ChartLegend } from "@/components/ui/chart";
import type { ChartConfig } from "@/components/ui/chart";
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { ArrowLeft, LineChart as LineChartIcon } from 'lucide-react';

// Sample data for the chart - this would ideally come from a dynamic source
const populationData = [
  { habitat: "Arrecife A", population: 1200, year: 2020 },
  { habitat: "Arrecife B", population: 800, year: 2020 },
  { habitat: "Costa Rocosa", population: 1500, year: 2020 },
  { habitat: "Mar Abierto", population: 500, year: 2020 },
  { habitat: "Arrecife A", population: 1350, year: 2021 },
  { habitat: "Arrecife B", population: 750, year: 2021 },
  { habitat: "Costa Rocosa", population: 1600, year: 2021 },
  { habitat: "Mar Abierto", population: 520, year: 2021 },
  { habitat: "Arrecife A", population: 1400, year: 2022 },
  { habitat: "Arrecife B", population: 900, year: 2022 },
  { habitat: "Costa Rocosa", population: 1550, year: 2022 },
  { habitat: "Mar Abierto", population: 600, year: 2022 },
];

// Filter data for a specific year for a simpler bar chart example
const currentYearData = populationData.filter(d => d.year === 2022);


const chartConfig = {
  population: {
    label: "Población Estimada",
    color: "hsl(var(--primary))", // Using primary color from theme
  },
} satisfies ChartConfig;

interface SpeciesAnalyticsPageProps {
  params: {
    speciesId: string;
  };
}

// Helper to format speciesId for display
function formatSpeciesName(speciesId: string) {
  return speciesId
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

export default function SpeciesAnalyticsPage({ params }: SpeciesAnalyticsPageProps) {
  const speciesName = formatSpeciesName(params.speciesId);

  return (
    <div className="container mx-auto px-4 py-12">
      <div className="mb-8">
        <Button asChild variant="outline" size="sm">
          <Link href="/species">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Volver a Especies
          </Link>
        </Button>
      </div>

      <header className="text-center mb-12">
         <div className="inline-flex items-center justify-center bg-primary/10 p-3 rounded-full mb-4">
          <LineChartIcon className="h-10 w-10 text-primary" />
        </div>
        <h1 className="text-4xl font-bold tracking-tight text-primary sm:text-5xl">
          Análisis de {speciesName}
        </h1>
        <p className="mt-3 text-lg text-muted-foreground sm:mt-5 sm:text-xl">
          Visualización de datos poblacionales y tendencias para {speciesName}. (Datos de ejemplo)
        </p>
      </header>

      <Card className="shadow-xl rounded-xl overflow-hidden animate-in fade-in slide-in-from-bottom-5 duration-500 ease-out">
        <CardHeader>
          <CardTitle>Población por Hábitat (Año 2022)</CardTitle>
          <CardDescription>Comparación de la población estimada en diferentes hábitats.</CardDescription>
        </CardHeader>
        <CardContent>
          <ChartContainer config={chartConfig} className="h-[400px] w-full">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart
                data={currentYearData}
                margin={{
                  top: 5,
                  right: 30,
                  left: 20,
                  bottom: 5,
                }}
                accessibilityLayer // Recommended for accessibility
              >
                <CartesianGrid strokeDasharray="3 3" vertical={false} />
                <XAxis 
                  dataKey="habitat" 
                  tickLine={false}
                  axisLine={false}
                  tickMargin={8}
                />
                <YAxis 
                  tickLine={false}
                  axisLine={false}
                  tickMargin={8}
                  tickFormatter={(value) => value.toLocaleString()}
                />
                <RechartsTooltip
                  cursor={{ fill: 'hsl(var(--muted))' }}
                  content={<ChartTooltipContent />} 
                />
                <RechartsLegend content={<ChartLegend />} />
                <Bar dataKey="population" fill="var(--color-population)" radius={[4, 4, 0, 0]} />
              </BarChart>
            </ResponsiveContainer>
          </ChartContainer>
        </CardContent>
      </Card>

      {/* You can add more charts or data visualizations here */}
       <Card className="mt-8 shadow-xl rounded-xl overflow-hidden animate-in fade-in slide-in-from-bottom-5 duration-500 ease-out delay-100">
        <CardHeader>
          <CardTitle>Más Análisis Próximamente</CardTitle>
          <CardDescription>Estamos trabajando en agregar más visualizaciones de datos detalladas para cada especie.</CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            Vuelve pronto para ver gráficos sobre tendencias a lo largo del tiempo, distribución geográfica y más.
          </p>
        </CardContent>
      </Card>


      <div className="mt-16 text-center">
        <Button asChild variant="link">
          <Link href="/">Volver a la Página Principal</Link>
        </Button>
      </div>
    </div>
  );
}

